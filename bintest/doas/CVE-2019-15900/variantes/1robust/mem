gs_base<32> := [0xf7f00000, 0xf7ff0000]u;
esp<32> := [0xfff00000, 0xfff80000]u;
DF<1> := 0<1>;


# user or group for the rule, as a string
controlled ident<80>;
# 0 maps to 1 (PERMIT) and 1 to 2 (DENY)
controlled action;

controlled ident2<80>;
controlled action2;

# nrules
@[0x0806dc80, 4] := 1<32>;
# rules
rules_list<32> := [0x55554000, 0x55554444]u;
@[0x0806dc74, 4] := rules_list<32>;

rules_malloc<32> := [0x55553000, 0x55553333]u;
ident_p<32> := [0x55552000, 0x55552222]u;
@[ident_p<32>, 10] := ident<80>;
@[rules_malloc<32>, 4] := 1<32> + (extu action 32);
@[rules_malloc<32> + 8<32>, 4] := ident_p<32>;
@[rules_malloc<32> + 12<32>, 4] := 0<32>;
@[rules_malloc<32> + 16<32>, 4] := 0<32>;
@[rules_malloc<32> + 20<32>, 4] := 0<32>;
@[rules_malloc<32> + 24<32>, 4] := 0<32>;
@[rules_list<32>, 4] := rules_malloc<32>;

rules_malloc2<32> := [0x66663000, 0x66663333]u;
ident_p2<32> := [0x66662000, 0x66662222]u;
@[ident_p2<32>, 10] := ident2<80>;
@[rules_malloc2<32>, 4] := 1<32> + (extu action2 32);
@[rules_malloc2<32> + 8<32>, 4] := ident_p2<32>;
# target
@[rules_malloc2<32> + 12<32>, 4] := 0<32>;
# cmd
@[rules_malloc2<32> + 16<32>, 4] := 0<32>;
# cmdargs
@[rules_malloc2<32> + 20<32>, 4] := 0<32>;
# envlist
@[rules_malloc2<32> + 24<32>, 4] := 0<32>;

@[rules_list<32>+4<32>, 4] := rules_malloc2<32>;


#only one decimal figure to simplify stubs
uid<32> := 4<32>;
gid<32> := 7<32>;

gid_p<32> := [0x55556000, 0x55556666]u;
@[gid_p<32>, 4] := gid<32>;
ngroups<32> := 1<32>;
lastr<32> := [0x55557000, 0x55557777]u;
target<32> := 0<32>;
cmd<32> := [0x55558000, 0x55558888]u;
cmd_args<32> := [0x55559000, 0x55559999]u;


# permit is static, and ghidra detects the calling convention as follows:
eax<32> := uid<32>;
edx<32> := gid_p<32>;
ecx<32> := ngroups<32>;
@[esp<32>+4<32>, 4] := lastr<32>;
@[esp<32>+8<32>, 4] := target<32>;
@[esp<32>+12<32>, 4] := cmd<32>;
@[esp<32>+16<32>, 4] := cmd_args<32>;



# an expression to determine if the solver cheated by writing a rule that
# allows the attacker explicitely

# checks that idents are printable ascii
printable_ascii_ident1 :=
  (ident<80>{0,7} >=u 33<8>) & (ident<80>{0,7} <=u 122<8>)
& ((ident<80>{8,79}  = 0<72>) | ((ident<80>{8,15}  >=u 33<8>) & (ident<80>{8,15}  <=u 122<8>)
& ((ident<80>{16,79} = 0<64>) | ((ident<80>{16,23} >=u 33<8>) & (ident<80>{16,23} <=u 122<8>)
& ((ident<80>{24,79} = 0<56>) | ((ident<80>{24,31} >=u 33<8>) & (ident<80>{24,31} <=u 122<8>)
& ((ident<80>{32,79} = 0<48>) | ((ident<80>{32,39} >=u 33<8>) & (ident<80>{32,39} <=u 122<8>)
& ((ident<80>{40,79} = 0<40>) | ((ident<80>{40,47} >=u 33<8>) & (ident<80>{40,47} <=u 122<8>)
& ((ident<80>{48,79} = 0<32>) | ((ident<80>{48,55} >=u 33<8>) & (ident<80>{48,55} <=u 122<8>)
& ((ident<80>{56,79} = 0<24>) | ((ident<80>{56,63} >=u 33<8>) & (ident<80>{56,63} <=u 122<8>)
& ((ident<80>{64,79} = 0<16>))))))))))))))));

printable_ascii_ident2 :=
  (ident2<80>{0,7} >=u 33<8>) & (ident2<80>{0,7} <=u 122<8>)
& ((ident2<80>{8,79}  = 0<72>) | ((ident2<80>{8,15}  >=u 33<8>) & (ident2<80>{8,15}  <=u 122<8>)
& ((ident2<80>{16,79} = 0<64>) | ((ident2<80>{16,23} >=u 33<8>) & (ident2<80>{16,23} <=u 122<8>)
& ((ident2<80>{24,79} = 0<56>) | ((ident2<80>{24,31} >=u 33<8>) & (ident2<80>{24,31} <=u 122<8>)
& ((ident2<80>{32,79} = 0<48>) | ((ident2<80>{32,39} >=u 33<8>) & (ident2<80>{32,39} <=u 122<8>)
& ((ident2<80>{40,79} = 0<40>) | ((ident2<80>{40,47} >=u 33<8>) & (ident2<80>{40,47} <=u 122<8>)
& ((ident2<80>{48,79} = 0<32>) | ((ident2<80>{48,55} >=u 33<8>) & (ident2<80>{48,55} <=u 122<8>)
& ((ident2<80>{56,79} = 0<24>) | ((ident2<80>{56,63} >=u 33<8>) & (ident2<80>{56,63} <=u 122<8>)
& ((ident2<80>{64,79} = 0<16>))))))))))))))));

# the uids and gids of rules of type permit is not the one of the attacker
cheating_uid_1 := (ident<80>{0,7} = 0x30 + (uid<32>{0,7})) & ((ident<80>{8,15}) = 0<8>);
cheating_gid_1 := (ident<80>{0,7} = 0x3a) & (ident<80>{8,15} = 0x30 + (gid<32>{0,7})) & (ident<80>{16,23} = 0<8>);

cheating_uid_2 := (ident2<80>{0,7} = 0x30 + (uid<32>{0,7})) & ((ident2<80>{8,15}) = 0<8>);
cheating_gid_2 := (ident2<80>{0,7} = 0x3a) & (ident2<80>{8,15} = 0x30 + (gid<32>{0,7})) & (ident2<80>{16,23} = 0<8>);

cheating_1 := (!action) & (cheating_uid_1 | cheating_gid_1);
cheating_2 := (!action2) & (cheating_uid_2 | cheating_gid_2);

cheating := cheating_1 | cheating_2 | (!(printable_ascii_ident1 & printable_ascii_ident2));
